name: Deploy Scraping & API Services

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-1
  # ECS_SERVICE: scraping-ecs-service-spot
  ECS_CLUSTER: scraping-ecs-cluster
  ECS_TASK_DEFINITION_PATH: .aws/task-definition.json
  LINE_ACCESS_TOKEN: ${{ secrets.LINE_ACCESS_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ECR_SCRAPER_REPOSITORY: dell_price_check_scrapers_lambda
  AWS_SUBNET_ID: '"subnet-01a0452bbbf32a610", "subnet-0c14d6ba93b4e674e", "subnet-0a8dcb2ef9ee576bc"'
  AWS_SECURITY_GROUP_ID: '"sg-0f17238bbb956958a"'

permissions:
  contents: read

jobs:
  scraper-build-test-push:
    name: Scraper Container - Test & Push
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    defaults:
      run:
        working-directory: scrapers
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Build and Test Docker Image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --provenance=false \
            --build-arg LINE_ACCESS_TOKEN=${{ env.LINE_ACCESS_TOKEN }} \
            -t temp_scraper:latest .
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
      
      - name: Push Image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.AWS_ECR_SCRAPER_REPOSITORY }}
        run: |
          docker image tag temp_scraper:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy-scraper-task:
    name: Deploy Scraper on ECS Task
    runs-on: ubuntu-20.04
    needs: [scraper-build-test-push]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true
      
      - name: Update ECS Task Definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_PATH }}
          container-name: scraper-container
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_SCRAPER_REPOSITORY }}
          line-access-token: LINE_ACCESS_TOKEN
      
      - name: Register New Task Definition
        id: register-task-def
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://${{ steps.render-task-def.outputs.task-definition }} --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
      
      - name: Run ECS Task
        run: |
          aws ecs run-task \
            --cluster ${{ env.ECS_CLUSTER }} \
            --task-definition $TASK_DEF_ARN \
            --network-configuration "awsvpcConfiguration={subnets=[${{ env.AWS_SUBNET_ID }}],securityGroups=[${{ env.AWS_SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}" \
            --capacity-provider-strategy "[{\"capacityProvider\": \"FARGATE_SPOT\", \"weight\": 1}]"

  api-build-test-deploy:
    name: API Container - Test & Deploy
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    defaults:
      run:
        working-directory: api
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Build Docker Image
        run: |
          docker image build -t temp_api:latest .
      
      - name: Start Temporary Container
        run: |
          docker run -d --name temp_api_container temp_api:latest tail -f /dev/null
      
      - name: Deploy API with Zappa
        run: |
          docker exec temp_api_container bash -c "
            source /workspace/.venv/bin/activate &&
            aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }} &&
            aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }} &&
            aws configure set region ${{ env.AWS_REGION }} &&
            zappa update
          "
      
      - name: Cleanup Temporary Container
        if: always()
        run: |
          docker stop temp_api_container
          docker rm temp_api_container